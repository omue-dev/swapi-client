import DOMPurify from "dompurify";

/**
 * STEP 1: Remove citations and links
 * ----------------------------------
 * Cleans up unwanted HTML fragments generated by editors like ChatGPT or Word.
 * Specifically removes:
 *  - ChatGPT's "webpage-citation-pill" blocks (including nested spans)
 *  - Empty leftover <span> wrappers
 *  - Any remaining <a> (link) tags and their contents
 */
const stripCitationsAndLinks = (html: string): string => {
  if (!html) return "";

  // Remove ChatGPT-style citation spans completely (including nested content)
  html = html.replace(/<span[^>]*data-testid="webpage-citation-pill"[^>]*>[\s\S]*?<\/span>/gi, "");

  // Remove empty <span> wrappers that may have surrounded citations
  html = html.replace(/<span[^>]*>\s*<\/span>/gi, "");

  // Remove any <a> tags (links) entirely — both tag and inner text
  html = html.replace(/<a\b[^>]*>[\s\S]*?<\/a>/gi, "");

  return html;
};

/**
 * STEP 2: Sanitize safely using DOMPurify
 * ---------------------------------------
 * DOMPurify removes potentially dangerous HTML, like scripts or data attributes.
 * Here we whitelist only the tags and attributes that are relevant for product
 * descriptions (as used in the shop system).
 *
 * Notes:
 * - "ALLOW_DATA_ATTR" is disabled → automatically removes all data-* attributes
 * - This ensures consistent and safe HTML even from WYSIWYG editors
 */
const safeSanitize = (html: string): string => {
  return DOMPurify.sanitize(html, {
    ALLOWED_TAGS: [
      // Basic text & structure
      "p", "br", "div", "span", "strong", "em", "b", "i", "u",
      "h1", "h2", "h3", "h4", "h5", "h6",
      // Lists
      "ul", "ol", "li",
      // Tables
      "figure", "table", "thead", "tbody", "tr", "th", "td",
      // Other useful tags
      "hr", "blockquote", "pre", "code"
    ],
    ALLOWED_ATTR: [
      "style", "colspan", "rowspan", "align", "scope", "width", "height"
    ],
    ALLOW_DATA_ATTR: false // Remove all data-* attributes for safety
  });
};

/**
 * STEP 3: Strip unwanted attributes
 * ---------------------------------
 * Even after sanitizing, editors often leave behind a ton of noise:
 * - id, class, aria-*, data-*, tabindex, role, etc.
 * This function removes all those unwanted attributes unless they are explicitly allowed.
 *
 * We parse the HTML into a DOM so we can iterate over real elements instead of
 * relying purely on regex (which is risky with nested tags).
 */
const stripUnwantedAttributes = (html: string): string => {
  const parser = new DOMParser();
  const doc = parser.parseFromString(html, "text/html");

  const allowed = new Set(["style", "colspan", "rowspan", "align", "scope", "width", "height"]);

  doc.body.querySelectorAll("*").forEach((el) => {
    const attrs = Array.from(el.attributes);

    attrs.forEach((attr: Attr) => {
      const name = attr.name.toLowerCase();

      // Attributes that always start with these prefixes are unwanted
      const isForbiddenPrefix = name.startsWith("data-") || name.startsWith("aria-");

      // Attributes that are explicitly forbidden by name
      const isForbiddenExact =
        name === "id" ||
        name === "class" ||
        name === "tabindex" ||
        name === "role" ||
        name === "contenteditable" ||
        name === "draggable" ||
        name === "dir";

      // Remove attributes that are not on the allowed list and match a forbidden rule
      if (!allowed.has(name) && (isForbiddenPrefix || isForbiddenExact)) {
        el.removeAttribute(name);
      }
    });
  });

  return doc.body.innerHTML;
};

/**
 * STEP 4: Remove all <span> tags completely
 * ----------------------------------------
 * Editors (especially Word and ChatGPT) wrap tons of text in unnecessary <span> tags,
 * often just for inline formatting or metadata (like `mso-fareast-language`).
 *
 * Here we:
 *  - Replace each <span> with its plain text content
 *  - Normalize whitespace to avoid layout issues
 */
const removeAllSpans = (html: string): string => {
  const parser = new DOMParser();
  const doc = parser.parseFromString(html, "text/html");

  // Replace all <span> tags with their plain text content
  doc.body.querySelectorAll("span").forEach((span) => {
    const text = span.textContent || "";
    const textNode = document.createTextNode(text);
    span.replaceWith(textNode);
  });

  // Normalize whitespace so the HTML output looks clean and consistent
  let cleaned = doc.body.innerHTML;

  // Collapse multiple spaces into one
  cleaned = cleaned.replace(/\s{2,}/g, " ");

  // Remove unnecessary spaces between tags (e.g., "> <")
  cleaned = cleaned.replace(/>\s+</g, "><");

  // Clean up leading spaces after newlines
  cleaned = cleaned.replace(/\n\s+/g, "\n");

  return cleaned.trim();
};

/**
 * STEP 5: Combine all cleaning steps
 * ----------------------------------
 * This is the main function that runs all cleanup utilities in the right order:
 *
 *  1. Remove citations & links
 *  2. Sanitize with DOMPurify (whitelist-based)
 *  3. Strip unwanted attributes (id, class, data-*, etc.)
 *  4. Remove all <span> tags (inline noise)
 *
 *  The result is clean, shop-ready HTML that is safe, simple, and consistent.
 */
export const cleanAndFormatDescription = (html: string): string => {
  console.log("test");

  let out = stripCitationsAndLinks(html);  // Remove citations and link junk
  out = safeSanitize(out);                 // Sanitize HTML safely
  out = stripUnwantedAttributes(out);      // Remove leftover attributes
  out = removeAllSpans(out);               // Remove <span> wrappers and normalize spacing

  return out.trim();
};
